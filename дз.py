print('№1')
print('True == 1 сравнивает значения. Так как класс bool является подклассом целых чисел, то True в данном случае будет той же самой единицей. 1')
print('True is 1 сравнивает адреса в памяти. Так как логические данные являются синглтон-объектами, то у них имеется собственный адрес в памяти, который не меняется по ходу работы скрипта. Поэтому число 1 и True занимают разные области в памяти. 1')

print('№2')
print('Она связана с раскрытием скобок в логических выражениях. 1 Дистрибутивность описывает, как одна операция «распределяется» над другой, и гарантирует, что два разных, но эквивалентных выражения дают один и тот же результат.')

print('№3')
print('Дистрибутивность описывает, как одна операция «распределяется» над другой, и гарантирует, что два разных, но эквивалентных выражения дают один и тот же результат.')

print('№4')
print ('False. Пример: bool(False) = False 0. Пример: bool(0) = False. Пустые последовательности (строки, списки, кортежи и т. д.). 1 Примеры: bool('') = False, bool() [] = False, bool({}) = False.')

print('№5')   
print('потому что человеку, читающему такой код, будет сложно понять порядок вычисления значений.')

print('#6')
print('Выражение «a and b» возвращает последнее истинное значение или первое ложное (остальные выражения даже не будут вычисляться в этом случае Выражение «boola and boolb» всегда вернёт булево значение то есть True или False')

print('№7')
print('В первую очередь рассчитываются выражения с оператором not. Далее вычисляются все конструкции, имеющие оператор and.  В последнюю очередь работает оператор or.')

